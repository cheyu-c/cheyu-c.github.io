%% Plotting the transverse velocity
%%
% Here is an example of some commands you can use to plot the transverse
% velocity
% 
% $$\beta_T$$
%
% as a function of 
% 
% $$\theta$$
% 
% . You should try to include these commands in your plotting M-file.
%
% To calculate betaT we need 
%
% $$\beta$$
%
% and theta. Since we are plotting betaT as a function of theta, we keep
% beta a constant. Just choose a value for *|beta|*:
beta = 0.99;
%%
% Then we make *|theta|* an independent variable vector, from 0 to
%
% $$\pi$$
%
% , including 200 elements:
theta = linspace(0, pi, 200);
%%
% Now we generate a dependent variable:
bT = betaT(beta,theta);
%%
% Here, *|betaT()|* is a user-specified function which returns the value of
% betaT based on the value of beta and theta we put in. You need to write
% your own *|betaT|* function M-file before you can continue!
%
% Now, get prepared to plot the transverse velocity. First we clear the
% figure area, just in case:
figure(1);
clf
%%
% Then we plot *|bT|* vs. *|theta|*, with blue line:
plot(theta, bT, 'b')
%%
% You can also write labels for the coordinates:
xlabel('theta (angle to line of sight)')
ylabel('transverse velocity (normalized to c)')
%%
% Or include a title for the plot:
title('Plot of Transverse Velocity')
%%
% Let's add a few other curves for varying value of beta:
beta = [0.5,0.7,0.9, 0.995, 0.999, 0.9999];
%%
% Don't forget to clear the figure area and turn the *|hold|* on:
clf
hold on
%%
% You can set the limits of the vertical axis so you can see structure
% of the equations for all beta's:
ylim([0 20])
%%
% Now plot:
for i=1:6,
    bT = betaT(beta(i),theta);
    plot(theta, bT)
end
%%
% Use the command *|legend|* to name each curve:
legend('0.5', 'beta(2)','beta(3)','beta(4)','beta(5)','beta(6)');

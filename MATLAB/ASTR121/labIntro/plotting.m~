%%  Plotting in Matlab
%  A.J. Melhus, 4-18-10; 
%  Revised by C. Chen, 9-22-11

%% Using ezplot command
% Use ezplot if you have a simple function and want a plot very quickly.
%
% Syntax: 
%
% *|ezplot(f)|*
%
% - plots a function *|f|* over default domain *|[-2pi, 2pi]|*
%
% - *|f|* can be symbolic, vector, or string
%
% - displays title *|f|* and independent variable *|x|* on figure
%  
% *|ezplot(f, [xmin,xmax])|*
% 
% - plots a function *|f|* over the given domain *|[xmin, xmax]|*
%  
% To try, clear figure space first:    
clf
%%
% Let's plot *|y = x^2|* over *|[-2pi, 2pi]|*:
ezplot('x^2')
%%
% Or we can plot *|f = cos(x) + 1|* over *|[0, 2pi]|*
f = 'cos(x)+1'
%%
% _(Note that this command is different with the command *|f = cos(x)+1|*.
% You can try to figure out what's the difference!)_
ezplot(f, [0, 2*pi])
%% Using plot command          
% *|plot|* is a much more robust plotting tool.
%
% Basic syntax:
%
% *|plot(x,y)|*
%
% - *|x|* and *|y|* are vectors containing the data you wish to plot
%
% - *|x|* and *|y|* must be of same length and type
%
% To try, we should set up *|x|* and *|y|* first. Let's define a vector
% from *|0|* to *|2pi|*, using the default stepsize of 1:
x1 = 0:2*pi
%%
% Then we can assign values to *|y1|* based on *|x1|*:
y1 = sin(x1)
%%
% _(See what's the difference between this command and *|y1 =
% 'sin(x1)'|*?)_
%
% Then we can plot the sine function:
plot(x1,y1)
%% 
% THIS PLOT LOOKS BAD because *|x1|* only contains 7 points (we need more 
% points to make a smooth graph).  
%
% Let's use *|linspace|* to make a much more smooth graph by creating a
% vector from *|0|* to *|2pi|* containing 100 linearly spaced points:
x2 = linspace(0, 2*pi);
y2 = sin(x2);
plot(x2,y2)
%%
% THIS PLOT LOOKS GOOD because *|x2|* contains many more points, creating a 
% smoother graph.
%% Plot aesthetics  
% _(taken/edited from
% http://www.engin.umich.edu/group/ctm/extras/plot.html )_
%
% The color and point marker can be changed on a plot by adding a third 
% parameter (in single quotes) to the plot command.
%
% Syntax:
%
% *|plot(x,y, 'aesthetic')|*
%
% - *|aesthetic|* consists of one to three characters which specify a color 
% and/or point marker type
%
% - color and point marker types:
%
% <html>
% <table width="300" border="1">
% <tr align="center"><td> y </td><td>  yellow  </td><td> .   </td><td>  point  </td></tr>
% <tr align="center"><td> m </td><td>  magenta </td><td> o   </td><td>  circle </td></tr>
% <tr align="center"><td> c </td><td>  cyan    </td><td> x   </td><td>  x-mark </td></tr>
% <tr align="center"><td> r </td><td>  red     </td><td> +   </td><td>  plus   </td></tr>
% <tr align="center"><td> g </td><td>  green   </td><td> -   </td><td>  solid  </td></tr>
% <tr align="center"><td> b </td><td>  blue    </td><td> *   </td><td>  star   </td></tr>
% <tr align="center"><td> w </td><td>  white   </td><td> :   </td><td>  dotted </td></tr>
% <tr align="center"><td> k </td><td>  black   </td><td> -.  </td><td>  dashdot</td></tr>
% <tr align="center"><td>   </td><td> 	        </td><td> --  </td><td>  dashed </td></tr>
% </table>
% </html>
%
% For example, to plot *|y2|* as a red, dotted line instead of the default 
% blue straight line, the command should be changed to:
plot(x2,y2, 'r:')
%% Multiple Plots, way 1
% Use multiple arguments within one plot command:
%
% Syntax:
%
% *|plot(x_1,y_1,'aesthetic_1', ..., x_n, y_n, 'aesthetic_n')|*
%
% For example:
t = linspace(0,2*pi);
plot(t, sinc(t), 'r.', t, (cos(t)).^2, t, (sin(t)).^2+(cos(t)).^2, 'ko')    
%% 
% This command plots *|sinc(t)|* (red dotted line), *|cos^2(t)|* (default 
% blue solid line), and *|sin^2+cos^2(t)|* (black circles) all on the same 
% plot.
%% Multiple Plots, way 2
% Use hold on/off command:
%
% You can use the *|hold|* command to make adjustments to the current figure 
% without erasing objects or information.
%
% _(hold is a more logical way of plotting multiple objects at once, and is 
% not as crammed.)_
%
% As in the previous example:
t = linspace(0,2*pi);
%%
% Let's plot *|sinc(t)|* first, using red dotted line:
v1 = sinc(t);
plot(t,v1,'r.')
%%
% Now, we use *|hold|* to toggle figure to allow more figure actions
hold on
%%
% _(By default, *|hold|* is *|off|*, so the original plot is erased when we
% call *|plot|* command.)_
%
% We can then continue on other lines:
v2 = (cos(t)).^2;
plot(t,v2)
%%
% _(If *|aesthetic|* is not specified, MATLAB will use the default setting:
% blue solid line.)_
v3 = (sin(t)).^2 + (cos(t)).^2;
plot(t,v3,'ko')
%%
% We can release figure toggle by typing
%hold off
%% Reversing axes
% Reversing axes is often useful in astronomy: think about the magnitude
% scale, where brighter is more negative.
%
% Reverse the plotted axes by using the *|set|* command:
%
% *|set(axes, 'XDir', 'reverse', 'YDir', 'reverse')|*
%
% This reverses both the x-axis and y-axis (positive is now left and down, 
% negative is right and up). You can use only 'XDir' to flip x-axis, or use 
% only 'YDir' to flip y-axis 

%clf % clear figure space
%set(axes, 'XDir','reverse', 'YDir', 'reverse')    % Reverses both axes 
%hold on    % toggles figure to allow more figure actions
%plot(t1,v1,'r.')    % plots sinc(t) in red points
%v2 = (cos(t1)).^2;
%plot(t1,v2,'k')    % plots cos^2(t) in black
%v3 = (sin(t1)).^2 + (cos(t1)).^2;
%plot(t1,v3,'g-.')   % plots sin^2 + cos^2(t) in green dash-dot
%hold off    % release figure toggle

